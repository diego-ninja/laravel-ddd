<?php

namespace {{ namespace }}\Application\Middleware\Events;

use {{ namespace }}\Domain\Events\DomainEvent;
use {{ namespace }}\Domain\Exceptions\{{ context }}DomainException;
use Closure;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;

class {{ middlewareName }}
{
    /**
     * Handle event middleware.
     */
    public function handle(DomainEvent $event, Closure $next): mixed
    {
        // Pre-processing logic
        $this->beforeProcessing($event);

        try {
            // Process the event
            $result = $next($event);

            // Post-processing logic
            $this->afterProcessing($event, $result);

            return $result;
        } catch (\Throwable $exception) {
            // Handle errors
            $this->onError($event, $exception);
            
            throw $exception;
        }
    }

    /**
     * Logic to execute before event processing.
     */
    private function beforeProcessing(DomainEvent $event): void
    {
        // Examples of pre-processing logic:
        
        // 1. Event logging
        Log::info('Processing domain event', [
            'event_type' => get_class($event),
            'event_id' => $event->eventId,
            'aggregate_id' => $event->aggregateId,
            'occurred_on' => $event->occurredOn->format('Y-m-d H:i:s'),
        ]);

        // 2. Event validation
        // $this->validateEvent($event);

        // 3. Duplicate detection
        // $this->checkForDuplicates($event);

        // 4. Event store persistence
        $this->persistEventToStore($event);

        // 5. Event ordering
        // $this->ensureEventOrdering($event);
    }

    /**
     * Logic to execute after successful event processing.
     */
    private function afterProcessing(DomainEvent $event, mixed $result): void
    {
        // Examples of post-processing logic:
        
        // 1. Success logging
        Log::info('Event processed successfully', [
            'event_type' => get_class($event),
            'event_id' => $event->eventId,
        ]);

        // 2. Mark event as processed
        $this->markEventAsProcessed($event);

        // 3. Trigger cascading events
        // $this->triggerCascadingEvents($event, $result);

        // 4. Update metrics
        // $this->recordEventMetrics($event, 'success');

        // 5. Notify monitoring systems
        // $this->notifyMonitoring($event, 'processed');
    }

    /**
     * Handle errors during event processing.
     */
    private function onError(DomainEvent $event, \Throwable $exception): void
    {
        // Examples of error handling:
        
        // 1. Error logging
        Log::error('Event processing failed', [
            'event_type' => get_class($event),
            'event_id' => $event->eventId,
            'error' => $exception->getMessage(),
            'trace' => $exception->getTraceAsString(),
        ]);

        // 2. Mark event as failed
        $this->markEventAsFailed($event, $exception);

        // 3. Dead letter queue
        // $this->sendToDeadLetterQueue($event, $exception);

        // 4. Retry mechanism
        // $this->scheduleRetry($event, $exception);

        // 5. Alert notifications
        // $this->sendErrorNotifications($event, $exception);
    }

    /**
     * Persist event to event store.
     */
    private function persistEventToStore(DomainEvent $event): void
    {
        try {
            DB::table('domain_events')->insert([
                'event_id' => $event->eventId,
                'event_type' => get_class($event),
                'aggregate_id' => $event->aggregateId,
                'payload' => json_encode($event->toPrimitives()),
                'occurred_on' => $event->occurredOn,
                'created_at' => now(),
            ]);
        } catch (\Throwable $exception) {
            Log::error('Failed to persist event to store', [
                'event_id' => $event->eventId,
                'error' => $exception->getMessage(),
            ]);
            
            // Don't throw - event processing should continue
        }
    }

    /**
     * Mark event as processed.
     */
    private function markEventAsProcessed(DomainEvent $event): void
    {
        try {
            DB::table('domain_events')
                ->where('event_id', $event->eventId)
                ->update([
                    'processed_at' => now(),
                    'status' => 'processed',
                ]);
        } catch (\Throwable $exception) {
            Log::warning('Failed to mark event as processed', [
                'event_id' => $event->eventId,
                'error' => $exception->getMessage(),
            ]);
        }
    }

    /**
     * Mark event as failed.
     */
    private function markEventAsFailed(DomainEvent $event, \Throwable $exception): void
    {
        try {
            DB::table('domain_events')
                ->where('event_id', $event->eventId)
                ->update([
                    'failed_at' => now(),
                    'status' => 'failed',
                    'error_message' => $exception->getMessage(),
                    'error_trace' => $exception->getTraceAsString(),
                ]);
        } catch (\Throwable $persistException) {
            Log::critical('Failed to mark event as failed', [
                'event_id' => $event->eventId,
                'original_error' => $exception->getMessage(),
                'persist_error' => $persistException->getMessage(),
            ]);
        }
    }

    /**
     * Check for duplicate events.
     */
    private function checkForDuplicates(DomainEvent $event): void
    {
        $exists = DB::table('domain_events')
            ->where('event_id', $event->eventId)
            ->where('status', 'processed')
            ->exists();

        if ($exists) {
            throw {{ context }}DomainException::businessRuleViolation(
                "Duplicate event detected: {$event->eventId}"
            );
        }
    }

    /**
     * Validate event data.
     */
    private function validateEvent(DomainEvent $event): void
    {
        // Validate event structure and data
        if (empty($event->eventId)) {
            throw {{ context }}DomainException::invalidData('Event ID cannot be empty');
        }

        if (empty($event->aggregateId)) {
            throw {{ context }}DomainException::invalidData('Aggregate ID cannot be empty');
        }

        // Additional validation based on event type
        $this->validateEventSpecificData($event);
    }

    /**
     * Validate event-specific data.
     */
    private function validateEventSpecificData(DomainEvent $event): void
    {
        // Implement event-specific validation
        // Example:
        // if ($event instanceof OrderWasPlaced) {
        //     if (empty($event->customerId)) {
        //         throw {{ context }}DomainException::invalidData('Customer ID required for OrderWasPlaced');
        //     }
        // }
    }

    /**
     * Record event processing metrics.
     */
    private function recordEventMetrics(DomainEvent $event, string $status): void
    {
        // Record event processing metrics
        // Example:
        // app('metrics')->increment('events.processed', [
        //     'event_type' => class_basename($event),
        //     'status' => $status,
        //     'context' => '{{ contextLower }}',
        // ]);
    }
}