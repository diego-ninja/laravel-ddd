<?php

namespace {{ namespace }}\Domain\ValueObjects;

use {{ namespace }}\Domain\Exceptions\{{ context }}DomainException;
use Modules\Shared\Domain\ValueObjects\BaseValueObject;

readonly class {{ name }} extends BaseValueObject
{
    private function __construct(
        private int $value
    ) {
        $this->validate($value);
    }

    /**
     * Create from integer value.
     */
    public static function fromInt(int $value): self
    {
        return new self($value);
    }

    /**
     * Create from string value.
     */
    public static function fromString(string $value): self
    {
        if (!is_numeric($value)) {
            throw {{ context }}DomainException::invalidData('{{ name }} must be a valid number');
        }
        
        return new self((int) $value);
    }

    /**
     * Create zero value.
     */
    public static function zero(): self
    {
        return new self(0);
    }

    /**
     * Get the numeric value.
     */
    public function value(): int
    {
        return $this->value;
    }

    /**
     * Add another {{ name }}.
     */
    public function add(self $other): self
    {
        return new self($this->value + $other->value);
    }

    /**
     * Subtract another {{ name }}.
     */
    public function subtract(self $other): self
    {
        return new self($this->value - $other->value);
    }

    /**
     * Multiply by another {{ name }}.
     */
    public function multiply(self $other): self
    {
        return new self($this->value * $other->value);
    }

    /**
     * Multiply by a factor.
     */
    public function multiplyBy(int $factor): self
    {
        return new self($this->value * $factor);
    }

    /**
     * Check if greater than another {{ name }}.
     */
    public function isGreaterThan(self $other): bool
    {
        return $this->value > $other->value;
    }

    /**
     * Check if less than another {{ name }}.
     */
    public function isLessThan(self $other): bool
    {
        return $this->value < $other->value;
    }

    /**
     * Check if greater than or equal to another {{ name }}.
     */
    public function isGreaterThanOrEqual(self $other): bool
    {
        return $this->value >= $other->value;
    }

    /**
     * Check if less than or equal to another {{ name }}.
     */
    public function isLessThanOrEqual(self $other): bool
    {
        return $this->value <= $other->value;
    }

    /**
     * Check if zero.
     */
    public function isZero(): bool
    {
        return $this->value === 0;
    }

    /**
     * Check if positive.
     */
    public function isPositive(): bool
    {
        return $this->value > 0;
    }

    /**
     * Check if negative.
     */
    public function isNegative(): bool
    {
        return $this->value < 0;
    }

    /**
     * Get absolute value.
     */
    public function abs(): self
    {
        return new self(abs($this->value));
    }

    /**
     * Convert to string.
     */
    public function __toString(): string
    {
        return (string) $this->value;
    }

    /**
     * Validate the numeric value.
     */
    private function validate(int $value): void
    {
        // Add specific validation rules here if needed
        // For example, ensure non-negative for quantities:
        // if ($value < 0) {
        //     throw {{ context }}DomainException::invalidData('{{ name }} cannot be negative');
        // }
    }
}